// <auto-generated />
using System;
using Infrastructure.EF.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.EF.Migrations
{
    [DbContext(typeof(EntityContext))]
    [Migration("20210414110750_v1")]
    partial class v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CommentUser", b =>
                {
                    b.Property<Guid>("LikedByUsersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LikedCommentsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LikedByUsersId", "LikedCommentsId");

                    b.HasIndex("LikedCommentsId");

                    b.ToTable("CommentUser");
                });

            modelBuilder.Entity("Domain.Entities.Forums.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UploadedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UploadedUserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UploadedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UploadedByUserId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("Domain.Entities.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.ToTable("User");
                });

            modelBuilder.Entity("PostUser", b =>
                {
                    b.Property<Guid>("LikedByUsersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LikedPostsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LikedByUsersId", "LikedPostsId");

                    b.HasIndex("LikedPostsId");

                    b.ToTable("PostUser");
                });

            modelBuilder.Entity("CommentUser", b =>
                {
                    b.HasOne("Domain.Entities.User.User", null)
                        .WithMany()
                        .HasForeignKey("LikedByUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Forums.Comment", null)
                        .WithMany()
                        .HasForeignKey("LikedCommentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Forums.Comment", b =>
                {
                    b.HasOne("Domain.Entities.User.User", "UploadedUser")
                        .WithMany("UploadedComments")
                        .HasForeignKey("UploadedUserId");

                    b.Navigation("UploadedUser");
                });

            modelBuilder.Entity("Domain.Entities.Post", b =>
                {
                    b.HasOne("Domain.Entities.User.User", "UploadedByUser")
                        .WithMany("UploadedPosts")
                        .HasForeignKey("UploadedByUserId");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("PostUser", b =>
                {
                    b.HasOne("Domain.Entities.User.User", null)
                        .WithMany()
                        .HasForeignKey("LikedByUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("LikedPostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.User.User", b =>
                {
                    b.Navigation("UploadedComments");

                    b.Navigation("UploadedPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
